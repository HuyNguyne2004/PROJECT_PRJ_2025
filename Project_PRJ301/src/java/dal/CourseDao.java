/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dal;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Scanner;
import model.Courses;

/**
 *
 * @author Admin
 */
public class CourseDao extends GenericDAO<Courses> {

    @Override
    public List<Courses> findAll() {
        return queryGenericDAO(Courses.class);
    }

    public static void main(String[] args) {
        // ‚úÖ T·∫°o instance c·ªßa CourseDao
        CourseDao courseDao = new CourseDao();

        // ‚úÖ T·∫°o Scanner ƒë·ªÉ nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm
        Scanner scanner = new Scanner(System.in);

        System.out.println("üîç Nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm kh√≥a h·ªçc: ");
        String keyword = scanner.nextLine();  // Ng∆∞·ªùi d√πng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm

        // ‚úÖ G·ªçi h√†m searchCoursesByName ƒë·ªÉ t√¨m ki·∫øm kh√≥a h·ªçc
        List<Courses> foundCourses = courseDao.searchCoursesByName("%" + keyword + "%");

        // ‚úÖ Ki·ªÉm tra v√† in ra danh s√°ch kh√≥a h·ªçc t√¨m th·∫•y
        if (foundCourses.isEmpty()) {
            System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc n√†o v·ªõi t·ª´ kh√≥a: " + keyword);
        } else {
            System.out.println("\nüìå Danh s√°ch kh√≥a h·ªçc t√¨m th·∫•y:");
            for (Courses course : foundCourses) {
                System.out.println("üîπ Course ID: " + course.getCourse_id()
                        + ", Title: " + course.getTitle()
                        + ", Instructor ID: " + course.getInstructor_id());
            }
        }

        // ‚úÖ ƒê√≥ng Scanner
        scanner.close();
    }

    public void delete(int courseId) {
        // üõë X√≥a d·ªØ li·ªáu li√™n quan tr∆∞·ªõc
        String sqlDeleteNotifications = "DELETE FROM notifications WHERE course_id = ?";
        String sqlDeleteReviews = "DELETE FROM reviews WHERE course_id = ?";
        String sqlDeleteEnrollments = "DELETE FROM enrollments WHERE course_id = ?";
        String sqlDeleteCourse = "DELETE FROM courses WHERE course_id = ?";

        parameterMap = new LinkedHashMap<>();
        parameterMap.put("course_id", courseId);

        deleteGenericDAO(sqlDeleteNotifications, parameterMap);
        deleteGenericDAO(sqlDeleteReviews, parameterMap);
        deleteGenericDAO(sqlDeleteEnrollments, parameterMap);
        boolean deletedCourse = deleteGenericDAO(sqlDeleteCourse, parameterMap);

        if (deletedCourse) {
            System.out.println("‚úÖ X√≥a th√†nh c√¥ng kh√≥a h·ªçc v·ªõi ID: " + courseId);
        } else {
            System.out.println("‚ö† Kh√¥ng th·ªÉ x√≥a kh√≥a h·ªçc v·ªõi ID: " + courseId + " (c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i ho·∫∑c b·ªã r√†ng bu·ªôc)");
        }
    }

    public void update(Courses updatedCourse) {
        String sql = "UPDATE [dbo].[courses]\n"
                + "SET [title] = ?, \n"
                + "    [description] = ?, \n"
                + "    [instructor_id] = ?, \n"
                + "    [schedule] = ?, \n"
                + "    [max_students] = ?, \n"
                + "    [room_id] = ?\n"
                + "WHERE [course_id] = ?;";

        // T·∫°o m·ªôt parameterMap ƒë·ªÉ l∆∞u tr·ªØ c√°c tham s·ªë
        parameterMap = new LinkedHashMap<>();
        parameterMap.put("title", updatedCourse.getTitle());
        parameterMap.put("description", updatedCourse.getDescription());
        parameterMap.put("instructor_id", updatedCourse.getInstructor_id());
        parameterMap.put("schedule", updatedCourse.getSchedule());
        parameterMap.put("max_students", updatedCourse.getMax_students());
        parameterMap.put("room_id", updatedCourse.getRoom_id());
        parameterMap.put("course_id", updatedCourse.getCourse_id());  // ƒê·∫£m b·∫£o r·∫±ng b·∫°n truy·ªÅn v√†o course_id ƒë·ªÉ t√¨m ƒë√∫ng kh√≥a h·ªçc

        // Th·ª±c thi c√¢u l·ªánh UPDATE
        boolean check = updateGenericDAO(sql, parameterMap);

        // Ki·ªÉm tra k·∫øt qu·∫£
        if (check) {
            System.out.println("Course with ID " + updatedCourse.getCourse_id() + " was updated successfully.");
        } else {
            System.out.println("Failed to update the course with ID " + updatedCourse.getCourse_id());
        }
    }

    public void insert(Courses newCourse) {
        String sql = "INSERT INTO courses (title, description, instructor_id, schedule, max_students, room_id) "
                + "VALUES (?, ?, ?, ?, ?, ?)";

        // T·∫°o m·ªôt parameterMap ƒë·ªÉ l∆∞u tr·ªØ c√°c tham s·ªë
        parameterMap = new LinkedHashMap<>();
        parameterMap.put("title", newCourse.getTitle());
        parameterMap.put("description", newCourse.getDescription());
        parameterMap.put("instructor_id", newCourse.getInstructor_id());
        parameterMap.put("schedule", newCourse.getSchedule());
        parameterMap.put("max_students", newCourse.getMax_students());
        parameterMap.put("room_id", newCourse.getRoom_id());

        // Th·ª±c thi c√¢u l·ªánh INSERT
        int inserted = insertGenericDAO(sql, parameterMap);

    }

    public Courses findById(int courseId) {
        String sql = "SELECT [course_id], [title], [description], [instructor_id], [schedule], "
                + "[max_students], [room_id], [image] FROM [dbo].[courses] WHERE [course_id] = ?";

        parameterMap = new LinkedHashMap<>();
        parameterMap.put("course_id", courseId); // ƒê·∫∑t tham s·ªë ƒë√∫ng c√°ch

        List<Courses> list = queryGenericDAO(Courses.class,
                sql, parameterMap);

        return list.isEmpty() ? null : list.get(0); // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc
    }

    public List<Courses> searchCoursesByName(String searchKeyword) {
        String sql = "SELECT * FROM courses WHERE course_id LIKE ?";
        parameterMap = new LinkedHashMap<>();
        parameterMap.put("course_id", searchKeyword);
        return queryGenericDAO(Courses.class, sql, parameterMap);
    }

}
